Traceback (most recent call last):
  File "/Users/julian/opt/anaconda3/envs/my_pytorch/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/Users/julian/opt/anaconda3/envs/my_pytorch/lib/python3.9/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/Users/julian/opt/anaconda3/envs/my_pytorch/lib/python3.9/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/Users/julian/opt/anaconda3/envs/my_pytorch/lib/python3.9/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/Users/julian/opt/anaconda3/envs/my_pytorch/lib/python3.9/asyncio/base_events.py", line 647, in run_until_complete
    return future.result()
  File "/Users/julian/opt/anaconda3/envs/my_pytorch/lib/python3.9/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/Users/julian/opt/anaconda3/envs/my_pytorch/lib/python3.9/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/julian/opt/anaconda3/envs/my_pytorch/lib/python3.9/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
myBopt.plot_acquisition()
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mTypeError[0m                                 Traceback (most recent call last)
Input [0;32mIn [14][0m, in [0;36m<cell line: 1>[0;34m()[0m
[0;32m----> 1[0m [43mmyBopt[49m[38;5;241;43m.[39;49m[43mplot_acquisition[49m[43m([49m[43m)[49m

File [0;32m~/opt/anaconda3/envs/my_pytorch/lib/python3.9/site-packages/GPyOpt/core/bo.py:265[0m, in [0;36mBO.plot_acquisition[0;34m(self, filename)[0m
[1;32m    258[0m [38;5;28;01mdef[39;00m [38;5;21mplot_acquisition[39m([38;5;28mself[39m,filename[38;5;241m=[39m[38;5;28;01mNone[39;00m):
[1;32m    259[0m [38;5;250m    [39m[38;5;124;03m"""[39;00m
[1;32m    260[0m [38;5;124;03m    Plots the model and the acquisition function.[39;00m
[1;32m    261[0m [38;5;124;03m        if self.input_dim = 1: Plots data, mean and variance in one plot and the acquisition function in another plot[39;00m
[1;32m    262[0m [38;5;124;03m        if self.input_dim = 2: as before but it separates the mean and variance of the model in two different plots[39;00m
[1;32m    263[0m [38;5;124;03m    :param filename: name of the file where the plot is saved[39;00m
[1;32m    264[0m [38;5;124;03m    """[39;00m
[0;32m--> 265[0m     [38;5;28;01mreturn[39;00m [43mplot_acquisition[49m[43m([49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43macquisition[49m[38;5;241;43m.[39;49m[43mspace[49m[38;5;241;43m.[39;49m[43mget_bounds[49m[43m([49m[43m)[49m[43m,[49m
[1;32m    266[0m [43m                            [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mmodel[49m[38;5;241;43m.[39;49m[43mmodel[49m[38;5;241;43m.[39;49m[43mX[49m[38;5;241;43m.[39;49m[43mshape[49m[43m[[49m[38;5;241;43m1[39;49m[43m][49m[43m,[49m
[1;32m    267[0m [43m                            [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mmodel[49m[38;5;241;43m.[39;49m[43mmodel[49m[43m,[49m
[1;32m    268[0m [43m                            [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mmodel[49m[38;5;241;43m.[39;49m[43mmodel[49m[38;5;241;43m.[39;49m[43mX[49m[43m,[49m
[1;32m    269[0m [43m                            [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mmodel[49m[38;5;241;43m.[39;49m[43mmodel[49m[38;5;241;43m.[39;49m[43mY[49m[43m,[49m
[1;32m    270[0m [43m                            [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43macquisition[49m[38;5;241;43m.[39;49m[43macquisition_function[49m[43m,[49m
[1;32m    271[0m [43m                            [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43msuggest_next_locations[49m[43m([49m[43m)[49m[43m,[49m
[1;32m    272[0m [43m                            [49m[43mfilename[49m[43m)[49m

File [0;32m~/opt/anaconda3/envs/my_pytorch/lib/python3.9/site-packages/GPyOpt/plotting/plots_bo.py:57[0m, in [0;36mplot_acquisition[0;34m(bounds, input_dim, model, Xdata, Ydata, acquisition_function, suggested_sample, filename)[0m
[1;32m     53[0m acqu_normalized [38;5;241m=[39m ([38;5;241m-[39macqu [38;5;241m-[39m [38;5;28mmin[39m([38;5;241m-[39macqu))[38;5;241m/[39m([38;5;28mmax[39m([38;5;241m-[39macqu [38;5;241m-[39m [38;5;28mmin[39m([38;5;241m-[39macqu)))
[1;32m     54[0m m, v [38;5;241m=[39m model[38;5;241m.[39mpredict(x_grid)
[0;32m---> 57[0m [43mmodel[49m[38;5;241;43m.[39;49m[43mplot_density[49m[43m([49m[43mbounds[49m[43m[[49m[38;5;241;43m0[39;49m[43m][49m[43m,[49m[43m [49m[43malpha[49m[38;5;241;43m=[39;49m[38;5;241;43m.5[39;49m[43m)[49m
[1;32m     59[0m plt[38;5;241m.[39mplot(x_grid, m, [38;5;124m'[39m[38;5;124mk-[39m[38;5;124m'[39m,lw[38;5;241m=[39m[38;5;241m1[39m,alpha [38;5;241m=[39m [38;5;241m0.6[39m)
[1;32m     60[0m plt[38;5;241m.[39mplot(x_grid, m[38;5;241m-[39m[38;5;241m1.96[39m[38;5;241m*[39mnp[38;5;241m.[39msqrt(v), [38;5;124m'[39m[38;5;124mk-[39m[38;5;124m'[39m, alpha [38;5;241m=[39m [38;5;241m0.2[39m)

File [0;32m~/opt/anaconda3/envs/my_pytorch/lib/python3.9/site-packages/GPy/plotting/gpy_plot/gp_plots.py:257[0m, in [0;36mplot_density[0;34m(self, plot_limits, fixed_inputs, resolution, plot_raw, apply_link, visible_dims, which_data_ycols, levels, label, predict_kw, **kwargs)[0m
[1;32m    252[0m helper_data [38;5;241m=[39m helper_for_plot_data([38;5;28mself[39m, X, plot_limits, visible_dims, fixed_inputs, resolution)
[1;32m    253[0m helper_prediction [38;5;241m=[39m helper_predict_with_model([38;5;28mself[39m, helper_data[[38;5;241m2[39m], plot_raw,
[1;32m    254[0m                                       apply_link, np[38;5;241m.[39mlinspace([38;5;241m2.5[39m, [38;5;241m97.5[39m, levels[38;5;241m*[39m[38;5;241m2[39m),
[1;32m    255[0m                                       get_which_data_ycols([38;5;28mself[39m, which_data_ycols),
[1;32m    256[0m                                       predict_kw)
[0;32m--> 257[0m plots [38;5;241m=[39m [43m_plot_density[49m[43m([49m[38;5;28;43mself[39;49m[43m,[49m[43m [49m[43mcanvas[49m[43m,[49m[43m [49m[43mhelper_data[49m[43m,[49m[43m [49m[43mhelper_prediction[49m[43m,[49m[43m [49m[43mlabel[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m
[1;32m    258[0m [38;5;28;01mreturn[39;00m pl()[38;5;241m.[39madd_to_canvas(canvas, plots)

File [0;32m~/opt/anaconda3/envs/my_pytorch/lib/python3.9/site-packages/GPy/plotting/gpy_plot/gp_plots.py:271[0m, in [0;36m_plot_density[0;34m(self, canvas, helper_data, helper_prediction, label, **kwargs)[0m
[1;32m    269[0m     fills [38;5;241m=[39m []
[1;32m    270[0m     [38;5;28;01mfor[39;00m d [38;5;129;01min[39;00m [38;5;28mrange[39m(mu[38;5;241m.[39mshape[[38;5;241m1[39m]):
[0;32m--> 271[0m         fills[38;5;241m.[39mappend([43mpl[49m[43m([49m[43m)[49m[38;5;241;43m.[39;49m[43mfill_gradient[49m[43m([49m
[1;32m    272[0m [43m            [49m[43mcanvas[49m[43m,[49m[43m [49m[43mXgrid[49m[43m[[49m[43m:[49m[43m,[49m[43m [49m[43mfree_dims[49m[43m[[49m[38;5;241;43m0[39;49m[43m][49m[43m][49m[43m,[49m[43m [49m[43m[[49m[43mp[49m[43m[[49m[43m:[49m[43m,[49m[43md[49m[43m][49m[43m [49m[38;5;28;43;01mfor[39;49;00m[43m [49m[43mp[49m[43m [49m[38;5;129;43;01min[39;49;00m[43m [49m[43mpercs[49m[43m][49m[43m,[49m[43m [49m
[1;32m    273[0m [43m            [49m[43mlabel[49m[38;5;241;43m=[39;49m[43mlabel[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m
[1;32m    274[0m         )
[1;32m    275[0m     [38;5;28;01mreturn[39;00m [38;5;28mdict[39m(gpdensity[38;5;241m=[39mfills)
[1;32m    276[0m [38;5;28;01melse[39;00m:

File [0;32m~/opt/anaconda3/envs/my_pytorch/lib/python3.9/site-packages/GPy/plotting/matplot_dep/plot_definitions.py:244[0m, in [0;36mMatplotlibPlots.fill_gradient[0;34m(self, canvas, X, percentiles, color, label, **kwargs)[0m
[1;32m    242[0m     [38;5;28;01mfrom[39;00m [38;5;21;01mmatplotlib[39;00m[38;5;21;01m.[39;00m[38;5;21;01mmlab[39;00m [38;5;28;01mimport[39;00m contiguous_regions
[1;32m    243[0m [38;5;66;03m# Handle united data, such as dates[39;00m
[0;32m--> 244[0m [43max[49m[38;5;241;43m.[39;49m[43m_process_unit_info[49m[43m([49m[43mxdata[49m[38;5;241;43m=[39;49m[43mX[49m[43m,[49m[43m [49m[43mydata[49m[38;5;241;43m=[39;49m[43my1[49m[43m)[49m
[1;32m    245[0m ax[38;5;241m.[39m_process_unit_info(ydata[38;5;241m=[39my2)
[1;32m    246[0m [38;5;66;03m# Convert the arrays so we can work with them[39;00m

[0;31mTypeError[0m: _process_unit_info() got an unexpected keyword argument 'xdata'
TypeError: _process_unit_info() got an unexpected keyword argument 'xdata'

